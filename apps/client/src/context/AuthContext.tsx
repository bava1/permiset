import React, { createContext, useContext, useState, useEffect, useRef } from "react";
import { login as apiLogin, verifyToken } from "../api/auth";
import axiosClient from "../api/axiosClient";
import { User } from "../utils/interfaces/IUser";
import { AuthContextType } from "../utils/interfaces/IAuthContextType";
import { useRouter } from "next/router";

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [permissions, setPermissions] = useState<string[]>([]);
  const [isAuthLoading, setIsAuthLoading] = useState(true);
  const router = useRouter();
  const tokenRef = useRef<string | null>(null); // üî• –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞

  // ‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  const login = async (email: string, password: string) => {
    try {
      const { token, refreshToken, user } = await apiLogin(email, password);
      if (!token) throw new Error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω!");

      if (typeof window !== "undefined") {
        localStorage.setItem("auth_token", token);
        //sessionStorage.setItem("auth_token", token);
        localStorage.setItem("refresh_token", refreshToken);
      }

      tokenRef.current = token;
      setToken(token);
      setUser(user);
      setPermissions(user.permissions || []);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", err);
    }
  };

  // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É `missing register`)
  const register = async (name: string, email: string, password: string, role?: string, status?: string) => {
    try {
      await axiosClient.post("/auth/register", { name, email, password, role, status });
      if (!role && !status) await login(email, password);
    } catch (err: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
      throw new Error(err.response?.data?.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
    }
  };

  // ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = async () => {
    try {
      if (typeof window !== "undefined") {
        localStorage.removeItem("auth_token");
        sessionStorage.removeItem("auth_token");
        localStorage.removeItem("refresh_token");
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", err);
    } finally {
      tokenRef.current = null;
      setToken(null);
      setUser(null);
      setPermissions([]);
      router.replace("/auth/login");
    }
  };

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É `missing hasPermission`)
  const hasPermission = (permission: string): boolean => permissions.includes(permission);

  // ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  useEffect(() => {
    if (typeof window !== "undefined") {
      const storedToken = localStorage.getItem("auth_token");
      console.log("üîπ useEffect –∑–∞–ø—É—â–µ–Ω. –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω:", storedToken);
  
      if (!storedToken) {
        setIsAuthLoading(false);
        return;
      }
  
      tokenRef.current = storedToken;
      setToken(storedToken);
      verifyToken()
        .then((user) => {
          setUser(user);
          setPermissions(user.permissions || []);
        })
        .catch(() => {
          console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞, –Ω–æ logout –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ–º.");
          setUser(null);
        })
        .finally(() => setIsAuthLoading(false));
    }
  }, [router.locale]);

  const isAuthenticated = !!token;

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        permissions,
        login,
        register, // üî• –î–û–ë–ê–í–õ–ï–ù–û ‚Üí –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ missing register!
        logout,
        isAuthenticated,
        isAuthLoading,
        hasPermission, // üî• –î–û–ë–ê–í–õ–ï–ù–û ‚Üí –ë–æ–ª—å—à–µ –Ω–µ—Ç –æ—à–∏–±–∫–∏ missing hasPermission!
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider");
  return context;
};
